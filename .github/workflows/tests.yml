name: Tests / Code Coverage
#  Tests / Code Coverage workflow runs unit tests and uploads a code coverage report
#  This workflow is run on pushes to master & every Pull Requests where a .go, .mod, .sum have been changed
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  cleanup-runs:
    runs-on: self-hosted
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"

  install-tparse:
    runs-on: self-hosted
    steps:
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - name: Display go version
        run: go version
      - name: install tparse
        run: |
          export GO111MODULE="on" && go install github.com/mfridman/tparse@v0.8.3
      - uses: actions/cache@v3.0.5
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary

  build:
    runs-on: self-hosted
    strategy:
      matrix:
        go-arch: ["amd64"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - name: Build
        run: GOARCH=${{ matrix.go-arch }} LEDGER_ENABLED=false make build

  split-test-files:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - name: Create a file with all the pkgs
        run: go list ./... > pkgs.txt
      - name: Split pkgs into 4 files
        run: split -d -n l/4 pkgs.txt pkgs.txt.part.
      # cache multiple
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-00"
          path: ./pkgs.txt.part.00
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-01"
          path: ./pkgs.txt.part.01
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-02"
          path: ./pkgs.txt.part.02
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-03"
          path: ./pkgs.txt.part.03

  tests:
    runs-on: self-hosted
    needs: split-test-files
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
      - name: test & coverage report creation
        run: |
          cat pkgs.txt.part.${{ matrix.part }} | xargs go test -mod=readonly -timeout 30m -coverprofile=${{ matrix.part }}profile.out -covermode=atomic -tags='ledger test_ledger_mock goleveldb'
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-coverage"
          path: ./${{ matrix.part }}profile.out

  upload-coverage-report:
    runs-on: self-hosted
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-coverage"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-coverage"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-coverage"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-coverage"
      - run: |
          cat ./*profile.out | grep -v "mode: atomic" >> coverage.txt
      - name: filter out DONTCOVER
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/line\/lbm/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done
      - uses: codecov/codecov-action@v3.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt

  test-integration:
    runs-on: self-hosted
    needs: split-test-files
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
      - name: test & coverage report creation
        run: |
          xargs --arg-file=pkgs.txt.part.${{ matrix.part }} go test -mod=readonly -json -timeout 30m -tags='cli_test goleveldb' | tee ${{ matrix.part }}-integration-output.txt
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-integration-output"
          path: ./${{ matrix.part }}-integration-output.txt

  test-integration-report:
    runs-on: self-hosted
    needs: [test-integration, install-tparse]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-integration-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-integration-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-integration-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-integration-output"
      - uses: actions/cache@v3.0.5
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary
      - name: Generate integration test report
        run: cat ./*-integration-output.txt | ~/go/bin/tparse

  test-integration-multi-node:
    runs-on: self-hosted
    needs: split-test-files
    strategy:
      fail-fast: false
      matrix:
        part: ["00", "01", "02", "03"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}"
      - name: test report creation
        run: |
          xargs --arg-file=pkgs.txt.part.${{ matrix.part }} go test -mod=readonly -json -timeout 30m -tags='cli_multi_node_test goleveldb' | tee ${{ matrix.part }}-integration-multi-node-output.txt
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.sha }}-${{ matrix.part }}-integration-multi-node-output"
          path: ./${{ matrix.part }}-integration-multi-node-output.txt

  test_integration_multi_node_report:
    runs-on: self-hosted
    needs: [test-integration-multi-node, install-tparse]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.0
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-00-integration-multi-node-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-01-integration-multi-node-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-02-integration-multi-node-output"
      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.sha }}-03-integration-multi-node-output"
      - uses: actions/cache@v3.0.5
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tparse-binary
      - name: Generate multi node integration test report
        run: cat ./*-integration-multi-node-output.txt | ~/go/bin/tparse

  test-localnet-blocks:
    runs-on: self-hosted
    needs: [build, tests]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.2.1
        with:
          go-version: 1.18
      - name: Start localnet
        run: |
          make localnet-start
      - name: Test blocks
        id: test-blocks
        continue-on-error: true
        run: ./networks/localnet-blocks-test.sh 40 5 10 localhost
      - name: Stop localnet
        run: |
          make localnet-stop
          if [ ${{ steps.test-blocks.outcome }} == 'failure' ] ; then
            exit 1
          fi
