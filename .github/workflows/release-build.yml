name: "Release Build"

on:
  push:
    tags: # Push events to matching v*, i.e. v20.15.10, v0.1.2-rc34
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+"

jobs:
  build:
    name: "Create Release"
    runs-on: ubuntu-latest
    steps:
      -   name: "Checkout code"
          uses: actions/checkout@v3.1.0
      -   name: set tag env
          run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      -   name: install go
          uses: actions/setup-go@v3
          with:
            go-version: '1.18'
            check-latest: true
      -   name: "Build lbm/build-artifacts Docker image"
          run: cd builders/build-artifacts && docker build -t lbm/build-artifacts .
      -   name: "Build artifacts"
          run: make distclean build-reproducible
      -   name: "Generate release note"
          run: cat ./RELEASE_NOTE.md <(echo) <(echo '```') ./artifacts/build_report <(echo '```') > ./releasenote
      -   name: "Create release"
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            body_path: ./releasenote
            draft: true
            prerelease: false
      -   name: "Upload build_report"
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./artifacts/build_report
            asset_name: build_report
            asset_content_type: application/file
#      -   name: "Upload darwin-amd64 artifact"
#          uses: actions/upload-release-asset@v1
#          env:
#            GITHUB_TOKEN: ${{ github.token }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: ./artifacts/lbm-${{ env.VERSION }}-darwin-amd64
#            asset_name: lbm-${{ env.VERSION }}-darwin-amd64
#            asset_content_type: application/binary
#      -   name: "Upload darwin-arm64 artifact"
#          uses: actions/upload-release-asset@v1
#          env:
#            GITHUB_TOKEN: ${{ github.token }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: ./artifacts/lbm-${{ env.VERSION }}-darwin-arm64
#            asset_name: lbm-${{ env.VERSION }}-darwin-arm64
#            asset_content_type: application/binary
      -   name: "Upload linux-amd64 artifact"
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./artifacts/lbm-${{ env.VERSION }}-linux-amd64
            asset_name: lbm-${{ env.VERSION }}-linux-amd64
            asset_content_type: application/binary
#      -   name: "Upload linux-arm64 artifact"
#          uses: actions/upload-release-asset@v1
#          env:
#            GITHUB_TOKEN: ${{ github.token }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: ./artifacts/lbm-${{ env.VERSION }}-linux-arm64
#            asset_name: lbm-${{ env.VERSION }}-linux-arm64
#            asset_content_type: application/binary
#      -   name: "Upload windows-amd64 artifact"
#          uses: actions/upload-release-asset@v1
#          env:
#            GITHUB_TOKEN: ${{ github.token }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: ./artifacts/lbm-${{ env.VERSION }}-windows-amd64.exe
#            asset_name: lbm-${{ env.VERSION }}-windows-amd64.exe
#            asset_content_type: application/binary
      -   name: "Upload compressed repository"
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ github.token }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./artifacts/lbm-${{ env.VERSION }}.tgz
            asset_name: lbm-${{ env.VERSION }}.tgz
            asset_content_type: application/gzip
