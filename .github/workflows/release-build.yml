name: "Release Build"

on:
  push:
    tags: # Push events to matching v*, i.e. v20.15.10, v0.1.2-rc34
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+"

jobs:
  create_tarball:
    name: "Create Tarball"
    runs-on: ubuntu-latest
    steps:
    - name: "Set tag as version"
      run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV  # set env.VERSION=v0.0.0
    - name: "Checkout code"
      uses: actions/checkout@v3.1.0
    - name: "Create compressed repository source"
      run: |
        git archive --format=tar --prefix "lbm-${{ env.VERSION }}/" HEAD | gzip -9n > lbm-${{ env.VERSION }}.tgz
        md5sum lbm-${{ env.VERSION }}.tgz | awk '{print $1}' > lbm-${{ env.VERSION }}.tgz.md5
        sha256sum lbm-${{ env.VERSION }}.tgz | awk '{print $1}' > lbm-${{ env.VERSION }}.tgz.sha256
    - name: "Store compressed source"
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ env.VERSION }}
        path: |
          lbm-${{ env.VERSION }}.tgz
          lbm-${{ env.VERSION }}.tgz.md5
          lbm-${{ env.VERSION }}.tgz.sha256
    - name: "Upload compressed repository source (to share other jobs)"
      uses: actions/upload-artifact@v3
      with:
        path: lbm-${{ env.VERSION }}.tgz
        name: lbm-${{ env.VERSION }}.tgz

  build_for_linux:
    name: "Release Build for Linux"
    needs: create_tarball
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
        include:
          - arch: amd64
            cc: x86_64-linux-gnu-gcc
            cxx: x86_64-linux-gnu-g++
          - arch: arm64
            cc: aarch64-linux-gnu-gcc
            cxx: aarch64-linux-gnu-g++
    steps:
      - name: "Set tag as version"
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV  # set env.VERSION=v0.0.0
      - name: "Update runtime"
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y build-essential g++-x86-64-linux-gnu g++-aarch64-linux-gnu
      - name: "Install go"
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'
          check-latest: true
      - name: "Print go environment for debugging"
        run: go env
      - name: "Download compressed repository source"
        uses: actions/download-artifact@v3
        with:
          name: release-${{ env.VERSION }}
      - name: "Extract compressed repository source"
        run: tar zxf lbm-${{ env.VERSION }}.tgz --strip-components=1

      - name: "Set ID=${{ env.VERSION }}-linux-${{ matrix.arch }}"
        run: echo "ID=${{ env.VERSION }}-linux-${{ matrix.arch }}" >> $GITHUB_ENV
      - name: "Build artifact: linux-${{ matrix.arch }}"
        run: |
          make clean build GOARCH=${{ matrix.arch }} CC=${{ matrix.cc }} CXX=${{ matrix.cxx }}
          mv ./build/lbm ./build/lbm-${{ env.ID }}
          md5sum ./build/lbm-${{ env.ID }} | awk '{print $1}' > ./build/lbm-${{ env.ID }}.md5
          sha256sum ./build/lbm-${{ env.ID }} | awk '{print $1}' > ./build/lbm-${{ env.ID }}.sha256
      - name: "Store artifact: linux-${{ matrix.arch }}"
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ env.VERSION }}
          path: |
            ./build/lbm-${{ env.ID }}
            ./build/lbm-${{ env.ID }}.md5
            ./build/lbm-${{ env.ID }}.sha256

  build_for_darwin:
    name: "Release Build for macOS"
    needs: create_tarball
    runs-on: macOS-latest
    strategy:
      matrix:
        arch: [ "amd64", "arm64" ]
    steps:
    - name: "Set tag as version"
      run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV  # set env.VERSION=v0.0.0
    - name: "Setup Xcode"
      run: sudo xcode-select --switch /Applications/Xcode.app
    - name: "Install md5sum"
      run: |
        brew update
        brew install md5sha1sum
    - name: "Install go"
      uses: actions/setup-go@v3
      with:
        go-version: '1.18'
        check-latest: true
    - name: "Print go environment"
      run: go env
    - name: "Download compressed repository source"
      uses: actions/download-artifact@v3
      with:
        name: release-${{ env.VERSION }}
    - name: "Extract compressed repository source"
      run: tar zxf lbm-${{ env.VERSION }}.tgz --strip-components=1

    - name: "Set ID=${{ env.VERSION }}-darwin-${{ matrix.arch }}"
      run: echo "ID=${{ env.VERSION }}-darwin-${{ matrix.arch }}" >> $GITHUB_ENV
    - name: "Build artifact: darwin-${{ matrix.arch }}"
      run: |
        make clean build GOARCH=${{ matrix.arch }}
        mv ./build/lbm ./build/lbm-${{ env.ID }}
        md5sum ./build/lbm-${{ env.ID }} | awk '{print $1}' > ./build/lbm-${{ env.ID }}.md5
        shasum -a 256 ./build/lbm-${{ env.ID }} | awk '{print $1}' > ./build/lbm-${{ env.ID }}.sha256
    - name: "Store artifact: darwin-${{ matrix.arch }}"
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ env.VERSION }}
        path: |
          ./build/lbm-${{ env.ID }}
          ./build/lbm-${{ env.ID }}.md5
          ./build/lbm-${{ env.ID }}.sha256

  create_release:
    name: "Create Release"
    needs: [ build_for_linux, build_for_darwin ]
    runs-on: ubuntu-latest
    steps:
    - name: "Set tag as version"
      run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV  # set env.VERSION=v0.0.0

    - name: "Download artifacts"
      uses: actions/download-artifact@v3
      with:
        name: release-${{ env.VERSION }}
    - name: "Extract compressed repository source"
      run: tar zxf lbm-${{ env.VERSION }}.tgz --strip-components=1 lbm-${{ env.VERSION }}/RELEASE_NOTE.md
    - name: "List artifact files for debugging"
      run: ls -laf
    - name: "Create build report"
      run: |
        echo "App: lbm" > build_report.txt
        echo "Version: ${{ env.VERSION }}" >> build_report.txt
        echo "Commit: ${{ github.sha }}" >> build_report.txt
        echo "Checksums MD5:" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-linux-amd64.md5` lbm-${{ env.VERSION }}-linux-amd64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-linux-arm64.md5` lbm-${{ env.VERSION }}-linux-arm64"  >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-darwin-amd64.md5` lbm-${{ env.VERSION }}-darwin-amd64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-darwin-arm64.md5` lbm-${{ env.VERSION }}-darwin-arm64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}.tgz.md5` lbm-${{ env.VERSION }}.tgz" >> build_report.txt
        echo "Checksums SHA256:" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-linux-amd64.sha256` lbm-${{ env.VERSION }}-linux-amd64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-linux-arm64.sha256` lbm-${{ env.VERSION }}-linux-arm64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-darwin-amd64.sha256` lbm-${{ env.VERSION }}-darwin-amd64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}-darwin-arm64.sha256` lbm-${{ env.VERSION }}-darwin-arm64" >> build_report.txt
        echo " `cat lbm-${{ env.VERSION }}.tgz.sha256` lbm-${{ env.VERSION }}.tgz" >> build_report.txt
    - name: "Create release note"
      run: |
        cat ./RELEASE_NOTE.md > release_note.txt
        echo '' >> release_note.txt
        echo '```text' >> release_note.txt
        cat ./build_report.txt >> release_note.txt
        echo '```' >> build_report.txt
    - name: "Create release"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: ./release_note.txt
        draft: true
        prerelease: false

    - name: "Upload artifact: lbm-${{ env.VERSION }}-linux-amd64"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: lbm-${{ env.VERSION }}-linux-amd64
        asset_name: lbm-${{ env.VERSION }}-linux-amd64
        asset_content_type: application/octet-stream
    - name: "Upload artifact: lbm-${{ env.VERSION }}-linux-arm64"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: lbm-${{ env.VERSION }}-linux-arm64
        asset_name: lbm-${{ env.VERSION }}-linux-arm64
        asset_content_type: application/octet-stream
    - name: "Upload artifact: lbm-${{ env.VERSION }}-dawrin-amd64"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: lbm-${{ env.VERSION }}-darwin-amd64
        asset_name: lbm-${{ env.VERSION }}-darwin-amd64
        asset_content_type: application/octet-stream
    - name: "Upload artifact: lbm-${{ env.VERSION }}-dawrin-arm64"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: lbm-${{ env.VERSION }}-darwin-arm64
        asset_name: lbm-${{ env.VERSION }}-darwin-arm64
        asset_content_type: application/octet-stream
    - name: "Upload artifact: compressed repository source"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: lbm-${{ env.VERSION }}.tgz
        asset_name: lbm-${{ env.VERSION }}.tgz
        asset_content_type: application/gzip
